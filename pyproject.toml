[project]
authors = [
    {name = "Zebedee Nicholls", email = "zebedee.nicholls@climate-resource.com"},
]
license = {text = "BSD-3-Clause"}
requires-python = ">=3.9"
dependencies = [
    "loguru>=0.7",
    "cf-xarray>=0.8",
    "xarray>=2022.0",
    "pint-xarray>=0.3",
    "numpy<2.0,>=1.23",
    "cftime>=1.6",
    "typing-extensions>=4.0",
    "pooch>=1.0",
    "netcdf4>=1.0",
    "attrs>=22.0",
    "typer<1.0.0,>=0.9.0",
    "validators<1.0.0,>=0.28.3",
    "cattrs<24.0.0,>=23.2.3",
]
name = "input4mips-validation"
version = "0.5.1a0"
description = "Validation of input4MIPs data (checking file formats, metadata etc.)."
readme = "README.md"

[project.optional-dependencies]
dev = [
    "mypy<2.0.0,>=1.2.0",
    "ruff<1.0.0,>=0.1.8",
    "pre-commit<4.0.0,>=3.3.1",
    "towncrier<24.0.0,>=23.6.0",
    "liccheck<1.0.0,>=0.9.1",
    "types-requests<3.0.0.0,>=2.31.0.20240125",
    "pandas-stubs<3.0.0.0,>=2.2.2.240603",
]
docs = [
    "myst-nb<1.0.0,>=0.17.0",
    "sphinx-book-theme<2.0.0,>=1.1.0",
    "sphinx-autodoc-typehints<2.0.0,>=1.23.0",
    "sphinx-autodocgen<2.0,>=1.3",
    "jupytext<2.0.0,>=1.14.5",
    "sphinx-copybutton<1.0.0,>=0.5.2",
    "sphinx-click<6.0.0,>=5.1.0",
]
notebooks = [
    "notebook>=6.0",
]
plots = [
    "matplotlib>=3.0",
]
tests = [
    "pytest<8.0.0,>=7.3.1",
    "pytest-cov<5.0.0,>=4.0.0",
    "coverage<8.0.0,>=7.2.0",
]

[project.scripts]
input4mips-validation = "input4mips_validation.cli:app"

[tool.pixi.feature.py39.dependencies]
python = "3.9.*"

[tool.pixi.feature.py310.dependencies]
python = "3.10.*"

[tool.pixi.feature.py311.dependencies]
python = "3.11.*"

[tool.pixi.environments]
default = { features = ["py39"] }
docs = { features = ["docs"], solve-group = "default" }
all-dev = { features = ["dev", "docs", "plots", "notebooks", "tests"], solve-group = "default" }
test-py39 = { features = ["tests"], solve-group = "default" }
test-py310 = { features = ["tests", "py310"] }
test-py311 = { features = ["tests", "py311"] }

[tool.pixi.project]
channels = ["conda-forge"]
platforms = [
    "osx-64",
    "osx-arm64",
    "linux-64",
    "linux-aarch64",
    "win-64",
    # Not sure why these two fail, anyway
    # "win-arm64",
    # "noarch",
]

[tool.pixi.pypi-dependencies]
input4mips_validation = { path = ".", editable = true }

[tool.pixi.tasks]

[tool.pixi.dependencies]

[tool.pdm]
[tool.pdm.dev-dependencies]
# If key tool were pdm, would worry about this,
# but it's not so empty here.

[tool.pdm.build]
locked = true
includes = ["src/input4mips_validation", "LICENCE"]

[build-system]
# PDM build locked: https://pdm-build-locked.readthedocs.io/en/stable/plugins/backend.html
# Not entirely necessary here, but doesn't hurt
# and is helpful.
requires = ["pdm-backend", "pdm-build-locked"]
build-backend = "pdm.backend"

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
fail_under = 80  # TODO: push this back up to 95
skip_empty = true
show_missing = true
# Regexes for lines to exclude from consideration in addition to the defaults
exclude_also = [
    # Don't complain about missing type checking code:
    "if TYPE_CHECKING",
]

[tool.mypy]
strict = true
# prevent unimported libraries silently being treated as Any
disallow_any_unimported = true
# show error codes on failure with context
show_error_codes = true
show_error_context = true
# warn if code can't be reached
warn_unreachable = true
# importing following uses default settings
follow_imports = "normal"

[tool.jupytext]
formats = "ipynb,py:percent"

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
]

[tool.ruff]
src = ["src"]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle error
    "W",  # pycodestyle warning
    "F",  # pyflakes
    "I",  # isort
    "D",  # pydocstyle
    "PL",  # pylint
    "TRY",  # tryceratops
    "NPY",  # numpy rules
    "RUF",  # ruff specifics
    "UP",  # pyupgrade
    "S",  # flake8-bandit
    # Disable pandas rules because ruff gets confused by xarray's API
    # "PD",
]
unfixable = [
    "PD002",  # Disable autofix for inplace as this often introduces bugs
]
ignore = [
    "D200",  # One-line docstring should fit on one line with quotes
    "D400",  # First line should end with a period
]

[tool.ruff.lint.per-file-ignores]
"test*.py" = [
    "D",  # Documentation not needed in tests
    "S101",  # S101 Use of `assert` detected
    "PLR2004" # Magic value used in comparison
]
"docs/source/notebooks/*" = [
    "D100",  # Missing docstring at the top of file
    "E402",  # Module level import not at top of file
    "S101",  # Use of `assert` detected
]
"scripts/*" = [
    "S101",# S101 Use of `assert` detected
]
# TODO: add this into copier
# Stubs out of control as we have to match what is done by others
"stubs/*" = [
    "PLR0913",
]

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.format]
docstring-code-format = true

[tool.towncrier]
package = "input4mips_validation"
package_dir = "src"
filename = "docs/source/changelog.md"
directory = "changelog/"
title_format = "## input4mips-validation {version} ({project_date})"
underlines = ["", "", ""]
issue_format = "[#{issue}](https://github.com/climate-resource/input4mips_validation/pulls/{issue})"

  [[tool.towncrier.type]]
  directory = "breaking"
  name = "Breaking Changes"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "deprecation"
  name = "Deprecations"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "feature"
  name = "Features"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "improvement"
  name = "Improvements"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "fix"
  name = "Bug Fixes"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "docs"
  name = "Improved Documentation"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "trivial"
  name = "Trivial/Internal Changes"
  showcontent = false

[tool.liccheck]
authorized_licenses = [
    "bsd",
    "bsd license",
    "BSD 3-Clause",
    "CC0",
    "apache",
    "apache 2.0",
    "apache software",
    "apache software license",
    "Apache License, Version 2.0",
    "Historical Permission Notice and Disclaimer (HPND)",
    "isc license",
    "isc license (iscl)",
    "gnu lgpl",
    "lgpl with exceptions or zpl",
    "LGPLv2+",
    "GNU Lesser General Public License v2 (LGPLv2)",
    "GNU Lesser General Public License v2 or later (LGPLv2+)",
    "mit",
    "mit license",
    "Mozilla Public License 2.0 (MPL 2.0)",
    "python software foundation",
    "python software foundation license",
    "zpl 2.1",
]
# This starting list is relatively conservative. Depending on the project, it
# may make sense to move some of these into the authorized list
unauthorized_licenses = [
    "agpl",
    "gnu agpl",
    "gpl v3",
    "gplv3",
    "gpl v2",
    "gplv2",
    "gpl v1",
    "gplv1",
]
